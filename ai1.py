import streamlit as st
import google.generativeai as genai
from textblob import TextBlob
import pandas as pd

# Thay API_KEY c·ªßa b·∫°n t·∫°i ƒë√¢y
#api

# H√†m g·ªçi Gemini AI
def generate_response(prompt):
    try:
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(prompt)
        return response.text if response.text else "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y."
    except Exception as e:
        return f"L·ªói: {str(e)}"


# Ph√¢n t√≠ch c·∫£m x√∫c
def analyze_sentiment(text):
    analysis = TextBlob(text)
    polarity = analysis.sentiment.polarity
    if polarity > 0.5:
        return "R·∫•t t√≠ch c·ª±c", polarity
    elif 0.1 < polarity <= 0.5:
        return "T√≠ch c·ª±c", polarity
    elif -0.1 <= polarity <= 0.1:
        return "Trung l·∫≠p", polarity
    elif -0.5 < polarity < -0.1:
        return "Ti√™u c·ª±c", polarity
    else:
        return "R·∫•t ti√™u c·ª±c", polarity


# G·ª£i √Ω c√°ch ƒë·ªëi ph√≥
def provide_coping_strategy(sentiment):
    strategies = {
        "R·∫•t t√≠ch c·ª±c": "H√£y ti·∫øp t·ª•c gi·ªØ v·ªØng tinh th·∫ßn t√≠ch c·ª±c n√†y nh√©! B·∫°n c√≥ th·ªÉ chia s·∫ª ni·ªÅm vui v·ªõi ng∆∞·ªùi kh√°c.",
        "T√≠ch c·ª±c": "B·∫°n ƒëang c√≥ m·ªôt tinh th·∫ßn t·ªët! H√£y duy tr√¨ n√≥ b·∫±ng c√°ch l√†m nh·ªØng ƒëi·ªÅu b·∫°n th√≠ch.",
        "Trung l·∫≠p": "Kh√¥ng sao c·∫£ n·∫øu b·∫°n c·∫£m th·∫•y b√¨nh th∆∞·ªùng. H√£y th·ª≠ m·ªôt ho·∫°t ƒë·ªông th√∫ v·ªã ƒë·ªÉ c·∫£i thi·ªán t√¢m tr·∫°ng!",
        "Ti√™u c·ª±c": "C√≥ v·∫ª b·∫°n ƒëang c·∫£m th·∫•y h∆°i t·ªá. H√£y th·ª≠ th∆∞ gi√£n b·∫±ng c√°ch nghe nh·∫°c ho·∫∑c ƒëi d·∫°o.",
        "R·∫•t ti√™u c·ª±c": "T√¥i r·∫•t ti·∫øc khi nghe ƒëi·ªÅu ƒë√≥. H√£y t√¢m s·ª± v·ªõi b·∫°n b√® ho·∫∑c t√¨m s·ª± gi√∫p ƒë·ª° t·ª´ chuy√™n gia t√¢m l√Ω."
    }
    return strategies.get(sentiment, "B·∫°n h√£y c·ªë g·∫Øng gi·ªØ v·ªØng tinh th·∫ßn nh√©!")


# Hi·ªÉn th·ªã c·∫£nh b√°o b·∫£o m·∫≠t
def display_disclaimer():
    st.sidebar.markdown("### ‚ö†Ô∏è Th√¥ng b√°o v·ªÅ quy·ªÅn ri√™ng t∆∞")
    st.sidebar.markdown(
        "·ª®ng d·ª•ng n√†y ch·ªâ l∆∞u tr·ªØ d·ªØ li·ªáu t·∫°m th·ªùi trong su·ªët phi√™n l√†m vi·ªác c·ªßa b·∫°n. "
        "Vui l√≤ng kh√¥ng chia s·∫ª th√¥ng tin c√° nh√¢n ho·∫∑c nh·∫°y c·∫£m."
    )


# Giao di·ªán ·ª©ng d·ª•ng Streamlit
st.title("üß† Tr·ª£ l√Ω H·ªó tr·ª£ T√¢m l√Ω")

# N√∫t b·∫Øt ƒë·∫ßu l·∫°i h·ªôi tho·∫°i
if st.button("üîÑ B·∫Øt ƒë·∫ßu l·∫°i cu·ªôc tr√≤ chuy·ªán"):
    st.session_state["messages"] = []
    st.session_state["mood_tracker"] = []

# Kh·ªüi t·∫°o b·ªô nh·ªõ h·ªôi tho·∫°i
if "messages" not in st.session_state:
    st.session_state["messages"] = []
if "mood_tracker" not in st.session_state:
    st.session_state["mood_tracker"] = []

# Nh·∫≠p tin nh·∫Øn
user_message = st.text_input("B·∫°n:", key="user_input")

# X·ª≠ l√Ω tin nh·∫Øn khi g·ª≠i
if user_message:
    # X√≥a h·ªôi tho·∫°i c≈© ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc h·ªôi tho·∫°i m·ªõi
    st.session_state["messages"] = []
    st.session_state["mood_tracker"] = []

    # Ph√¢n t√≠ch c·∫£m x√∫c v√† g·ª£i √Ω
    sentiment, polarity = analyze_sentiment(user_message)
    coping_strategy = provide_coping_strategy(sentiment)

    # G·ªçi Gemini AI
    response = generate_response(user_message)

    # L∆∞u v√†o b·ªô nh·ªõ
    st.session_state["messages"].append(("B·∫°n", user_message))
    st.session_state["messages"].append(("Bot", response))
    st.session_state["mood_tracker"].append((user_message, sentiment, polarity))

# Hi·ªÉn th·ªã tin nh·∫Øn
for sender, message in st.session_state["messages"]:
    st.text(f"{sender}: {message}")

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì c·∫£m x√∫c
if st.session_state["mood_tracker"]:
    mood_data = pd.DataFrame(st.session_state["mood_tracker"], columns=["Tin nh·∫Øn", "C·∫£m x√∫c", "ƒêi·ªÉm s·ªë"])
    st.line_chart(mood_data["ƒêi·ªÉm s·ªë"])

# Hi·ªÉn th·ªã g·ª£i √Ω ƒë·ªëi ph√≥
if user_message:
    st.write(f"üìå **G·ª£i √Ω ƒë·ªëi ph√≥:** {coping_strategy}")

# Hi·ªÉn th·ªã t√†i nguy√™n h·ªó tr·ª£
st.sidebar.title("üìû T√†i nguy√™n h·ªó tr·ª£")
st.sidebar.write("N·∫øu b·∫°n c·∫ßn tr·ª£ gi√∫p ngay l·∫≠p t·ª©c, vui l√≤ng li√™n h·ªá:")
st.sidebar.write("1. üìû T·ªïng ƒë√†i h·ªó tr·ª£ t√¢m l√Ω VN: 1900 6233")
st.sidebar.write("2. üì≤ Nh·∫Øn tin h·ªó tr·ª£: 111")
st.sidebar.write("[üîó Th√™m t√†i nguy√™n](https://www.mentalhealth.gov/get-help/immediate-help)")

# Hi·ªÉn th·ªã t·ªïng k·∫øt phi√™n tr√≤ chuy·ªán
if st.sidebar.button("üìä Xem t·ªïng k·∫øt"):
    st.sidebar.write("### üìå T·ªïng k·∫øt phi√™n tr√≤ chuy·ªán")
    for i, (message, sentiment, polarity) in enumerate(st.session_state["mood_tracker"]):
        st.sidebar.write(f"{i + 1}. {message} - C·∫£m x√∫c: {sentiment} (ƒêi·ªÉm s·ªë: {polarity})")

display_disclaimer()
